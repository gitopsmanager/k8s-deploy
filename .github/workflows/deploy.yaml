# deploy.yaml
# Copyright (c) 2025 Affinity7 Consulting Ltd
# SPDX-License-Identifier: MIT
#
# This workflow is licensed under the MIT License.
# See https://github.com/gitopsmanager/k8s-deploy/blob/main/LICENSE for details.

# .github/workflows/deploy.yaml

on:
  workflow_call:
    inputs:
      runner:
        required: false
        type: string
        default: ubuntu-latest
      cd_repo:
        required: true
        type: string
      environment:
        required: true
        type: string
      application:
        required: true
        type: string
      namespace:
        required: true
        type: string
      repo:
        required: true
        type: string
      repo_path:
        required: true
        type: string
      repo_commit_id:
        required: false
        type: string
      branch_name:
        required: false
        type: string
        default: "main"
      overlay_dir:
        required: true
        type: string
      image_tag:
        required: false
        type: string
      image_base_name:
        required: false
        type: string
      image_base_names:
        required: false
        type: string
      kustomize_version:
        required: false
        type: string
        default: "5.0.1"
      skip_status_check:
        description: 'If true, skip waiting for ArgoCD sync to complete'
        required: false
        default: 'false'
        type: string
      debug:
        required: false
        type: boolean
        default: false
    secrets:
      ARGO_CD_ADMIN_USER:
        required: true
      ARGO_CD_ADMIN_PASSWORD:
        required: true
      CONTINUOUS_DEPLOYMENT_GH_APP_ID:
        required: true
      CONTINUOUS_DEPLOYMENT_GH_APP_PRIVATE_KEY:
        required: true

jobs:
  deploy:
    runs-on: ${{ inputs.runner }}
    outputs:
      cd_path: ${{ steps.cdpath.outputs.cd_path }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repo }}
        path: source
        ref: ${{ inputs.repo_commit_id != '' && inputs.repo_commit_id || inputs.branch_name }}




    - name: Install yq and envsubst
      run: |
        sudo apt-get update
        sudo apt-get install -y gettext curl
        YQ_VERSION="v4.40.5"
        curl -sL "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" -o yq
        chmod +x yq
        sudo mv yq /usr/local/bin/yq

    - name: Generate GitHub App token
      id: generate_token
      uses: tibdex/github-app-token@v1
      with:
        app_id: ${{ secrets.CONTINUOUS_DEPLOYMENT_GH_APP_ID }}
        private_key: ${{ secrets.CONTINUOUS_DEPLOYMENT_GH_APP_PRIVATE_KEY }}
        repository: ${{ inputs.cd_repo }}


    - name: Checkout reusable workflow repo
      uses: actions/checkout@v4
      with:
        repository: gitopsmanager/k8s-deploy
        path: reusable


    - name: Checkout continuous-deployment repo
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.cd_repo }}
        token: ${{ steps.generate_token.outputs.token }}
        path: cd


    - name: Load environment config
      id: env
      run: |
        ENV="${{ inputs.environment }}"
        CONFIG="cd/config/env-map.yaml"

        CLUSTER=$(yq ".[\"${ENV}\"].cluster" "$CONFIG")
        DNS_ZONE=$(yq ".[\"${ENV}\"].dns_zone" "$CONFIG")
        NAMESPACE="${{ inputs.namespace }}"


        echo "cluster=$CLUSTER" >> "$GITHUB_OUTPUT"
        echo "dns_zone=$DNS_ZONE" >> "$GITHUB_OUTPUT"
        echo "namespace=$NAMESPACE" >> "$GITHUB_OUTPUT"

    - name: Export CD_PATH
      id: cdpath
      run: |
        CD_PATH="continuous-deployment/${{ steps.env.outputs.cluster }}/${{ inputs.namespace }}/${{ inputs.application }}"
        echo "CD_PATH=$CD_PATH" >> "$GITHUB_ENV"
        echo "cd_path=$CD_PATH" >> "$GITHUB_OUTPUT"

    - name: Template manifest files with envsubst
      run: |
        export CLUSTER_NAME="${{ steps.env.outputs.cluster }}"
        export DNS_ZONE="${{ steps.env.outputs.dns_zone }}"
        export NAMESPACE="${{ inputs.namespace }}"
        export APPLICATION="${{ inputs.application }}"

        find source/${{ inputs.repo_path }} \( -name '*.yaml' -o -name '*.yml' -o -name '*.json' \) -type f -print0 |
          while IFS= read -r -d '' file; do
            if grep -q '\${' "$file"; then
              echo "Templating $file"
              envsubst < "$file" > "$file.tmp" && mv "$file.tmp" "$file"
            fi
          done



  

    - name: Copy templated files to CD_PATH
      run: |
        TARGET="cd/${{ env.CD_PATH }}/${{ inputs.repo_path }}"
        mkdir -p "$TARGET"
        rm -rf "$TARGET"/*
        cp -r source/${{ inputs.repo_path }}/* "$TARGET/"


    - name: Debug structure
      if: ${{ inputs.debug }}
      run: |
        echo "Debug mode enabled. Showing contents of CD_PATH:"
        find cd/${{ env.CD_PATH }} || echo "Nothing copied!"


    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v2
      with:
        kustomize-version: ${{ inputs.kustomize_version }}

    - name: Patch image tag(s) if provided
      if: ${{ inputs.image_tag != '' }}
      run: |
        cd cd/${{ env.CD_PATH }}/${{ inputs.repo_path }}/overlays/${{ inputs.overlay_dir }}
        echo "Setting image tag to ${{ inputs.image_tag }}"

        if [ -n "${{ inputs.image_base_name }}" ]; then
          echo "Using image_base_name: ${{ inputs.image_base_name }}"
          kustomize edit set image "${{ inputs.image_base_name }}=*:${{ inputs.image_tag }}"
        fi

        if [ -n "${{ inputs.image_base_names }}" ]; then
          IFS=',' read -ra IMAGE_NAMES <<< "${{ inputs.image_base_names }}"
          for name in "${IMAGE_NAMES[@]}"; do
            echo "Setting image tag for $name"
            kustomize edit set image "$name=*:${{ inputs.image_tag }}"
          done
        fi




    - name: Run kustomize build
      id: kustomize
      run: |
        cd cd/${{ env.CD_PATH }}/${{ inputs.repo_path }}/overlays/${{ inputs.overlay_dir }}
        kustomize build . > ../../../build-output.yaml

    - name: Upload built manifest as artifact
      uses: actions/upload-artifact@v4
      with:
        name: built-kustomize-manifest
        path: build-output.yaml

    - name: Upload templated source manifests as artifact
      uses: actions/upload-artifact@v4
      with:
        name: templated-source-manifests
        path: source/${{ inputs.repo_path }}

    - name: Commit and push to continuous-deployment repo
      env:
        GH_TOKEN: ${{ steps.app-auth.outputs.token }}
      run: |
        cd cd
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add "${{ env.CD_PATH }}//${{ inputs.repo_path }}/"
        git diff --cached --quiet && echo "No changes to commit" && exit 0
        git commit -m "Deploy ${{ inputs.application }} to ${{ steps.env.outputs.cluster }}/${{ inputs.namespace }}"
        git push


    - name: Set ArgoCD variables
      id: argocd_vars
      run: |
        CLUSTER="${{ steps.env.outputs.cluster }}"
        NAMESPACE="${{ inputs.namespace }}"
        DNS_ZONE="${{ steps.env.outputs.dns_zone }}"
        APP_NAME="${NAMESPACE}-{{ inputs.application }}"
        ARGOCD_URL="https://${CLUSTER}-argocd-argocd-web-ui.${DNS_ZONE}"
        SYNC_URL="${ARGOCD_URL}/api/v1/applications/${APP_NAME}/sync"
        STATUS_URL="${ARGOCD_URL}/api/v1/applications/${APP_NAME}"

        echo "cluster=$CLUSTER" >> "$GITHUB_OUTPUT"
        echo "namespace=$NAMESPACE" >> "$GITHUB_OUTPUT"
        echo "dns_zone=$DNS_ZONE" >> "$GITHUB_OUTPUT"
        echo "app_name=$APP_NAME" >> "$GITHUB_OUTPUT"
        echo "argocd_url=$ARGOCD_URL" >> "$GITHUB_OUTPUT"
        echo "sync_url=$SYNC_URL" >> "$GITHUB_OUTPUT"
        echo "status_url=$STATUS_URL" >> "$GITHUB_OUTPUT"


    - name: Check or create ArgoCD application
      id: ensure_app
      run: |
        APP_NAME="${{ steps.argocd_vars.outputs.app_name }}"
        ARGOCD_URL="${{ steps.argocd_vars.outputs.argocd_url }}"
        STATUS_URL="${{ steps.argocd_vars.outputs.status_url }}"
        CD_REPO="${{ inputs.repo }}"
        CD_PATH="${{ env.CD_PATH }}/${{ inputs.repo_path }}/overlays/${{ inputs.overlay_dir }}"
        NAMESPACE="${{ inputs.namespace }}"

        echo "Checking if ArgoCD app $APP_NAME exists..."

        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
          -u "${{ secrets.ARGO_CD_ADMIN_USER }}:${{ secrets.ARGO_CD_ADMIN_PASSWORD }}" \
          "$STATUS_URL")

        echo "http_status=$HTTP_STATUS" >> "$GITHUB_OUTPUT"
        echo "app_name=$APP_NAME" >> "$GITHUB_OUTPUT"

        if [[ "$HTTP_STATUS" == "200" ]]; then
          echo "✅ ArgoCD app $APP_NAME already exists."
          exit 0
        elif [[ "$HTTP_STATUS" != "404" ]]; then
          echo "❌ Unexpected response from ArgoCD (HTTP $HTTP_STATUS)"
          exit 1
        fi

        echo "⚠️ App not found. Rendering and creating $APP_NAME in ArgoCD..."

        # Set variables for envsubst
        export APP_NAME
        export CD_REPO
        export CD_PATH
        export NAMESPACE

        # Render template
        envsubst < reusable/templates/argocd-application-template.yaml > rendered-app.yaml

        echo "✅ Rendered ArgoCD app YAML:"
        cat rendered-app.yaml

        # Submit to ArgoCD
        CREATE_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/argocd_create_resp.txt \
          -X POST "$ARGOCD_URL/api/v1/applications" \
          -H "Content-Type: application/yaml" \
          -u "${{ secrets.ARGO_CD_ADMIN_USER }}:${{ secrets.ARGO_CD_ADMIN_PASSWORD }}" \
          --data-binary @rendered-app.yaml)

        if [[ "$CREATE_RESPONSE" -ne 200 && "$CREATE_RESPONSE" -ne 201 ]]; then
          echo "❌ Failed to create ArgoCD app. HTTP $CREATE_RESPONSE"
          cat /tmp/argocd_create_resp.txt
          exit 1
        fi

        echo "✅ ArgoCD app $APP_NAME successfully created."







    - name:  Sync ArgoCD app via REST API
      id: argosync
      run: |

        APP_NAME="${{ steps.argocd_vars.outputs.app_name }}"
        ARGOCD_URL="${{ steps.argocd_vars.outputs.argocd_url }}"
        STATUS_URL="${{ steps.argocd_vars.outputs.status_url }}"
        SYNC_URL="${{ steps.argocd_vars.outputs.sync_url }}"
        CD_REPO="${{ inputs.repo }}"
        CD_PATH="${{ env.CD_PATH }}/${{ inputs.repo_path }}/overlays/${{ inputs.overlay_dir }}"
        NAMESPACE="${{ steps.argocd_vars.outputs.namespace }}"

        echo "Syncing ArgoCD app $APP_NAME using $ARGOCD_URL..."

        HTTP_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/curl_sync_response.txt \
          -X POST "$SYNC_URL" \
          -H "Content-Type: application/json" \
          -u "${{ secrets.ARGO_CD_ADMIN_USER }}:${{ secrets.ARGO_CD_ADMIN_PASSWORD }}" \
          -d '{}')

        if [ "$HTTP_RESPONSE" -ne 200 ] && [ "$HTTP_RESPONSE" -ne 201 ]; then
          echo "Failed to trigger sync. HTTP response code: $HTTP_RESPONSE"
          cat /tmp/curl_sync_response.txt
          exit 1
        fi

        echo "Sync successfully triggered. ArgoCD accepted the sync request."

        if [[ "${{ inputs.skip_status_check }}" == "true" ]]; then
          echo "Skipping ArgoCD sync status check. Assuming sync was accepted."
          exit 0
        fi

        echo "Waiting for sync to complete..."
        for i in {1..12}; do
          STATUS=$(curl -s -u "${{ secrets.ArgoCDAdminUser }}:${{ secrets.ArgoCDAdminPassword }}" "$STATUS_URL" | jq -r '.status.sync.status')
          echo "Current sync status: $STATUS"
          if [ "$STATUS" = "Synced" ]; then
            echo "ArgoCD sync completed."
            exit 0
          fi
          sleep 10
        done

        echo "ArgoCD sync did not complete in time."
        exit 1






  